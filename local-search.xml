<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020.6.7</title>
    <link href="/2020/06/07/2020.6.7/"/>
    <url>/2020/06/07/2020.6.7/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs python">a = int(input());<span class="hljs-keyword">print</span> a;</code></pre><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(O2)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(O3)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"Ofast"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"inline"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fgcse"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fgcse-lm"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fipa-sra"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-ftree-pre"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-ftree-vrp"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fpeephole2"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-ffast-math"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fsched-spec"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"unroll-loops"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-falign-jumps"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-falign-loops"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-falign-labels"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fdevirtualize"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fcaller-saves"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fcrossjumping"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fthread-jumps"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-funroll-loops"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fwhole-program"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-freorder-blocks"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fschedule-insns"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"inline-functions"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-ftree-tail-merge"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fschedule-insns2"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fstrict-aliasing"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fstrict-overflow"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-falign-functions"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fcse-skip-blocks"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fcse-follow-jumps"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fsched-interblock"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fpartial-inlining"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"no-stack-protector"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-freorder-functions"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-findirect-inlining"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fhoist-adjacent-loads"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-frerun-cse-after-loop"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"inline-small-functions"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-finline-small-functions"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-ftree-switch-conversion"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-foptimize-sibling-calls"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fexpensive-optimizations"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-funsafe-loop-optimizations"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"inline-functions-called-once"</span>)</span><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> GCC optimize(<span class="hljs-meta-string">"-fdelete-null-pointer-checks"</span>) </span><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x)</span></span>&#123;    <span class="hljs-keyword">int</span> w=<span class="hljs-number">1</span>;<span class="hljs-keyword">char</span> c=<span class="hljs-number">0</span>;x=<span class="hljs-number">0</span>;    <span class="hljs-keyword">while</span> (c^<span class="hljs-string">'-'</span>&amp;&amp;(c&lt;<span class="hljs-string">'0'</span>||c&gt;<span class="hljs-string">'9'</span>))c=getchar();    <span class="hljs-keyword">if</span> (c==<span class="hljs-string">'-'</span>)w=<span class="hljs-number">-1</span>,c=getchar();    <span class="hljs-keyword">while</span> (c&gt;=<span class="hljs-string">'0'</span>&amp;&amp;c&lt;=<span class="hljs-string">'9'</span>)x=(x&lt;&lt;<span class="hljs-number">1</span>)+(x&lt;&lt;<span class="hljs-number">3</span>)+(c^<span class="hljs-number">48</span>),c=getchar();    x*=w;&#125;<span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span></span>&#123;    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;    write(n/<span class="hljs-number">10</span>);    <span class="hljs-built_in">putchar</span>(n%<span class="hljs-number">10</span>+<span class="hljs-string">'0'</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">is</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>&#123;<span class="hljs-keyword">if</span> (x==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> i=<span class="hljs-number">2</span>;i*i&lt;=x;++i)<span class="hljs-keyword">if</span> (x%i==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-keyword">int</span> n,x;read(n);<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i) &#123;read(x);<span class="hljs-keyword">if</span> (x==<span class="hljs-number">5</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">"5=2+3"</span>); <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">int</span> h=<span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-keyword">int</span> j=<span class="hljs-number">2</span>;j&lt;=x&gt;&gt;<span class="hljs-number">1</span>;++j)<span class="hljs-keyword">if</span> (is(j))<span class="hljs-keyword">if</span> (is(x-j)) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%d=%d+%d\n"</span>,x,j,x-j); h=<span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (!h)<span class="hljs-built_in">puts</span>(<span class="hljs-string">"NO WAY!"</span>);&#125;&#125;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre><h2 id="哈哈"><a href="#哈哈" class="headerlink" title="哈哈"></a>哈哈</h2><pre><code class="hljs delphi"><span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">sort</span> <span class="hljs-params">(l,r:longint)</span>;</span>  <span class="hljs-keyword">var</span>     i,j,m,t:longint;  <span class="hljs-keyword">begin</span>    i:=l; j:=r; m:=a[(l+r)&gt;&gt;<span class="hljs-number">1</span>];    <span class="hljs-keyword">repeat</span>      <span class="hljs-keyword">while</span> a[i]&lt;m <span class="hljs-keyword">do</span> inc(i);      <span class="hljs-keyword">while</span> a[j]&gt;m <span class="hljs-keyword">do</span> dec(j);      <span class="hljs-keyword">if</span> i&lt;=j <span class="hljs-keyword">then</span> <span class="hljs-keyword">begin</span>        t:=a[i]; a[i]:=a[j]; a[j]:=t;        inc(i); dec(j);      <span class="hljs-keyword">end</span>;    <span class="hljs-keyword">until</span> i&gt;j;    <span class="hljs-keyword">if</span> l&lt;j <span class="hljs-keyword">then</span> sort(l,j);    <span class="hljs-keyword">if</span> i&lt;r <span class="hljs-keyword">then</span> sort(i,r);  <span class="hljs-keyword">end</span>;</code></pre><p>*The End</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/06/07/hello-world/"/>
    <url>/2020/06/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
