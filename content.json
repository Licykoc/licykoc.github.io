{"meta":{"title":"Licykoc的博客","subtitle":"","description":"","author":"Licykoc","url":"https://licykoc.github.io","root":"/"},"pages":[],"posts":[{"title":"一些神奇的短文","slug":"dw","date":"2020-06-07T14:01:30.000Z","updated":"2020-06-07T13:02:06.996Z","comments":true,"path":"2020/06/07/dw/","link":"","permalink":"https://licykoc.github.io/2020/06/07/dw/","excerpt":"","text":"1.如果26个英文字母 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 分别等于: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 那么： Knowledge (知识):K+N+O+W+L+E+D+G+E=11+14+15+23+12+5+4+7+5=96%。 Workhard (努力工作）：W+O+R+K+H+A+R+D＝ 23+15+18+11+8+1+18+4 =98%。 也就是说知识和努力工作对我们人生的影响可以达到96％和98％。 Luck（好运） L+U+C+K＝12+21+3+11=47%。 Love（爱情） L+O+V+E＝12+15+22+5=54%。 看来，这些我们通常认为重要的东西却并没起到最重要的作用。 那么，什么可以决定我们100％的人生呢？是Money金钱吗？ M+O+N+E+Y=13+15+14+5+25=72%。 看来也不是。 是Leadership领导能力吗？ L+E+A+D+E+R+S+H+I+P=12+5+1+4+5+18+19+9+16=89% 还不是。 金钱 , 权力也不能完全决定我们的生活。那是什么呢？ 其实，真正能使我们生活圆满的东西就在我们的代码里面！ iostream输入输出流所在的头文件 I+O+S+T+R+E+A+M=9+15+19+20+18+5+1+13=100% 所以坚持写代码吧…… 2.你是否还记得，昔日的辉煌？ 想当年，你仅靠一壶水，竟奇迹般地穿越了整个沙漠。 是什么，支持着你？ 是它，——泰山。 你知道，只有登上泰山，五岳之尊，你才能蜕变，成为一个真正的勇士。 便是这黑暗中的一丝希望，便能成为你无穷的动力之源。 斩杀怪蜥，击退盗贼，只有你知道，这些力量来自何方。 最后的最后，你来到了这里。 你站在山下，仰望这座巍峨高耸的山脉， 从容地走上前去，写下四个大字： 山前留名3.大人们忙着去SB（上班）; 我呢，就来上网看看又有什么新消息在SB（散播）; 晚上,点菜的时候我说SB（随便）; 吃饱了到大街上SB（散步）; 回来手里就抓着SB（鼠标）; 有心情还去博客里写写SB（随笔）; 人，整天都在SB ! 有幸碰到两美国美妞聊天，以为自己英文过关，但只听清一句话就是SB（somebody = sb.）; 人活着可真SB（失败）啊........ 那年我SB（十八），到部队当SB（士兵）。一开始，我当的是SB（哨兵）。 苦差事啊，看见SB（上边）就要敬礼，一站几个钟头还不让看SB（手表），屁大的事情都要及时SB（上报），练站姿的时候还要挂个小SB（沙包），一天下来，连SB（散步）的力气也没有了。 我就SB（随便）编了个理由说我SB（生病）想转去当SB（水兵），结果被分到一个SB（舢板）上，靠，就我那个SB（身板），把我晕得呀，连上个月会餐吃的SB（扇贝）、SB（烧饼）都吐出来了，额滴神呀，我SB（上辈）子做了什么孽啊。 领导打算把我改去当SB（伞兵），我说我不去，这要是着陆不小心，SB（势必）就变成SB（伤兵）了，要是SB（手背）或者SB（上臂）受伤裹上SB（纱布），最多留个SB（伤疤），要是腿摔断，可就变成SB（孙膑）了，如果遇到SB（山包）SB（闪避）不及，那可真的SB（折本）了。 于是，我干脆SB（收兵）不干了。当兵前后SB（三百）天，除了累得脸SB（刷白），什么也没有学到。去SB（上班）吧？我念书的时候也不认真，从来不带SB（书包）、不看SB（书本），现在连SB（鼠标）都不会用。 只好去给人家看SB（水泵），我连SB（烧杯）都没有摸过，我哪懂？那个SB（设备），没有说明、没有SB（商标）也没有其它SB（识别）标记，噪音的SB（声波）在屋子里SB（散播），象SB（山崩）一样。突然，一个SB（事变）发生了，我SB（身边）的一块SB（石板）突然倒下了 4.李白：锦瑟无端五十弦，去年借我两万元 杜甫：嫦娥应悔偷灵药，此事我咋不知道 李白：重帏深下莫愁堂，你丫不要跟我装 杜甫：秦时明月汉时关，陈年旧债已还完 李白：万紫千红总是情，不还我钱真不行 杜甫：春风又绿江南岸，我不还你怎么办 李白：借问酒家何处有，不还我钱你是狗 杜甫：烟笼寒水月笼沙，敢骂老子你王八 5.黑板上写着一道数学题：a&gt;0, a+1&lt;0 数竞大神小A对信息学大佬小B说：“你连初中数学都没学过吗？原不等式组显然无解。” 小B拿起了一根粉笔，对小A微微一笑，转身在黑板上写下了： a=2147483647。 6.唧唧复唧唧，木兰开飞机， 开的什么机？波音747！ 问女何所思，问女何所忆． 女亦有所思，没钱买飞机． 昨夜见军帖，要用轰炸机， 飞机十二架，架架买不起． 阿爷无大钱，木兰无金银， 愿去买钢铁，从此造飞机． 东市买图纸，西市买螺丝， 南市买玻璃，北市买铁皮． 旦辞爷娘去，暮宿旧机库， 不闻爷娘唤女声，但闻铁皮摩擦滋啦啦． 旦辞机库去，暮至军营旁， 不闻爷娘唤女声，但闻将军大呼哈哈哈． 万里开飞机，关山一下没． 热气传机翼，日光照玻璃． 将军被吓死，壮士魂已飞． 飞来撞天子，天子躺病床． 策勋十二转，赏赐俩耳光． 可汗问所欲，木兰不愿进牢房； 愿开747,飞着回故乡. 爹娘闻女来,端起机关枪; 阿姊闻妹来,当户举手枪; 小弟闻姊来,AK47推上膛. 开我机舱门,进我飞机舱, 脱我战时袍,换上飞行装, 多装手榴弹,对外架机枪. 出门埋炸弹,亲友皆惊忙: 离别十二年,不知木兰变态狂. 疯子脚蹬地,呆子眼紧闭, 两人并排走,谁能说我不正常? 7.班长说:走，我们去炸核弹基地。 副班长说:这个主意不错 化学课代表负责提取氢气 物理课代表负责拼装氢弹 数学课代表负责计算爆破面积 地理课代表负责策划爆破地点 信息课代表负责编写氢弹程序 历史课代表负责记录光辉场面 美术课代表负责描画壮观景致 生物课代表负责事后生态环境 政治课代表负责使用法律打官司 语文课代表负责乱写文章推卸责任 英语课代表到外国购买进口材料 体育课代表负责屠杀HLZ 轰隆一声响。。。。。。 8.ಠ.ಠ我有一个特异功能！！ ಠ.ರೃ取下一只眼睛~ ಠ.ಠ再装上去~ ರೃ.ಠ取下另一只~ ಠ.ಠ再装上去~ ರೃ.ರೃ两只都取下来~ ರೃ∀ರೃ装不上去了！！！ 9. 西江月・证明 即得易见平凡，仿照上例显然。 留作习题答案略，读者自证不难。 反之亦然同理， 推论自然成立。 略去过程 Q.E.D.， 由上可知证毕。","categories":[{"name":"选文","slug":"选文","permalink":"https://licykoc.github.io/categories/%E9%80%89%E6%96%87/"}],"tags":[]},{"title":"洛谷-题解 P6188 【[NOI Online 入门组]文具订购（民间数据）】","slug":"lgP6188","date":"2020-06-07T13:01:30.000Z","updated":"2020-06-07T13:02:08.046Z","comments":true,"path":"2020/06/07/lgP6188/","link":"","permalink":"https://licykoc.github.io/2020/06/07/lgP6188/","excerpt":"","text":"蒟蒻来发题解啦本蒟蒻康不懂上面大佬的方法 其实这道题用纯暴力也是可以水过去的 awa 详见下方注释 uses math; var n,a,b,c,ma,mb,mc,tt:longint; //ma,mb,mc是储存最优解的变量，tt是有没有答案的标记 begin readln(n); //输入 if (n mod 14)=0 then //特判，是14的倍数直接输出 begin write(n div 14,' ',n div 14,' ',n div 14); halt; end; for a:=n div 7 downto 0 do //暴力枚举圆规的个数 for b:=(n-a*7)&gt;&gt;2 downto 0 do //暴力枚举笔的个数 Ps：&gt;&gt;2是位运算，等同于 div 4，但是更快 begin c:=(n-a*7-b*4) div 3; //省略第三重循环，直接算笔记本的个数 if a*7+b&lt;&lt;2+c*3=n then //如果可以用完n元钱，Ps: &lt;&lt;2也是位运算，等同于 *4 begin if min(a,min(b,c))&gt;=min(ma,min(mb,mc)) then //题目要求的第2条，3个个数中最小的最大 if a+b+c&gt;=ma+mb+mc then //题目要求的第3条，总和最大 begin tt:=1; ma:=a; mb:=b; mc:=c; end; //记录当前答案，并更新tt为1 end; end; if tt=0 then write(-1) //若没有答案，输出-1 else write(ma,' ',mb,' ',mc); //输入 end. //完结撒花awa","categories":[{"name":"普及/提高-","slug":"普及-提高","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A-%E6%8F%90%E9%AB%98/"}],"tags":[]},{"title":"洛谷-P6547 [COCI2010-2011#2] NAPOR 题解","slug":"lgP6547","date":"2020-06-07T12:01:30.000Z","updated":"2020-06-07T12:59:21.096Z","comments":true,"path":"2020/06/07/lgP6547/","link":"","permalink":"https://licykoc.github.io/2020/06/07/lgP6547/","excerpt":"","text":"发现没有Pascal的题解，赶紧来水一发 题目大致意思就是从$n$个字符串里找到用非数字符号分隔开的每个数字并排序 从字符串中找数字的话，可以使用最长平台（假的）来实现 for j:=1 to length(s) do if s[j] in ['0'..'9'] then z:=z+s[j]//类似最长平台的算法 else begin if z='' then continue; //如果是空串，那么跳过 while (z[1]='0') do delete(z,1,1);//如果有前缀0，去除 inc(tot); a[tot]:=z;chen//存入数组 z:=''; end; 打完上面的代码后，本题就基本$ok$了，但还有一点细节 细节1:在处理前缀0时，要防止只有一个数字$0$的时候，所以要加特判 while (z[1]=&#39;0&#39;) do delete(z,1,1); 变成 while (z[1]=&#39;0&#39;)and(z&lt;&gt;&#39;0&#39;) do delete(z,1,1); 细节2:存数要用高精度存，毕竟题目所说有100位的整数呢 细节3: 既然要用高精度存，那么在对数组排序时需要用字符串的比较方式：( length(a) &lt; length(b) ) or ( length(a) = lengt(b) ) and ( a &lt; b ) 到这里，本题就AC啦 下面是代码君: var z,s,t:ansistring; n,i,j,tot:longint; a:array[0..500] of ansistring; begin readln(n); for i:=1 to n do begin readln(s); s:=s+' '; z:=''; for j:=1 to length(s) do if s[j] in ['0'..'9'] then z:=z+s[j] else begin if z='' then continue; while (z[1]='0')and(z&lt;&gt;'0') do delete(z,1,1); inc(tot); a[tot]:=z; z:=''; end; end; for i:=1 to tot-1 do for j:=i+1 to tot do if (length(a[i])&gt;length(a[j]))or((length(a[i])=length(a[j]))and(a[i]&gt;a[j])) then begin t:=a[i]; a[i]:=a[j]; a[j]:=t; end; for i:=1 to tot do writeln(a[i]); end.","categories":[{"name":"普及-","slug":"普及","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A/"}],"tags":[]},{"title":"洛谷-题解 P6581 【远大目标】","slug":"lgP6581","date":"2020-06-07T11:01:30.000Z","updated":"2020-06-07T13:02:08.916Z","comments":true,"path":"2020/06/07/lgP6581/","link":"","permalink":"https://licykoc.github.io/2020/06/07/lgP6581/","excerpt":"","text":"发现没人用Python，赶紧来水一发 题意：对于每一个$n(1 \\le n \\le 2^{63}-1)$,输出$n*2-1$ 如果$n \\le 0$时，输出$0$ 分析：最大的$n$已经到了$2^{63}-1$,普通的long long会爆，用unsigned long long即可 但本蒟蒻过于懒蛋，使用”高精度杀手Python“来切此题: 代码：n = int(input()) if (n&lt;=0) : print(0) else : print(n * 2 - 1) 短小精悍","categories":[{"name":"普及-","slug":"普及","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A/"}],"tags":[]},{"title":"宁波-题解 P1348 4.传话游戏(Pascal)","slug":"nbP1348","date":"2020-06-06T14:01:30.000Z","updated":"2020-06-07T13:02:06.056Z","comments":true,"path":"2020/06/06/nbP1348/","link":"","permalink":"https://licykoc.github.io/2020/06/06/nbP1348/","excerpt":"","text":"说实话这道题很简单 学过一点点图论的人都知道可以用floyd算法 f[i][j] = f[i][j] || f[i][k] &amp;&amp; f[k][j] //floyd核心部分 但是floyd算法的时间复杂度为o(n^3)，对于本题的n=1000是过不掉的 所以本题正解为Tarjan算法 然鹅因为本人过于蒟蒻码量太大，我不打算用Tarjan算法 既然普通的floyd过不了的话，就开氧气使用奇技淫巧，强行优化 在仔细研究floyd核心程序段时，可以发现在for k:&#x3D;1 to n do for i:&#x3D;1 to n do for j:&#x3D;1 to n do &#x2F;&#x2F;这一层循环 f[i,j]:&#x3D;f[i,j] or (f[i,k] and f[k,j]);如果f[i,k]=false 那么在 for j:=1 to n do 这个循环里f[i,j]将不会有变化 根据此发现，可以将其改成 for k:=1 to n do for i:=1 to n do if f[i,k] then //优化 for j:=1 to n do f[i,j]:=f[i,j] or f[k,j]; 优化后的代码就能A本题了！当然，本题的正解是Tarjan算法，用floyd只能算是侥幸 给出完整代码（Pascal):var n,m,x,y,i,j,k:longint; f:array[0..1001,0..1001] of boolean; begin read(n,m); for i:=1 to m do begin read(x,y); f[x,y]:=true; //用图的数据结构存储 end; for k:=1 to n do for i:=1 to n do if f[i,k] then //优化 for j:=1 to n do f[i,j]:=f[i,j] or f[k,j]; for i:=1 to n do if f[i,i] then writeln('T') else writeln('F'); end.","categories":[{"name":"普及/提高-","slug":"普及-提高","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A-%E6%8F%90%E9%AB%98/"}],"tags":[]},{"title":"宁波-题解 P1942 4.取数游戏(Pascal)","slug":"nbP1942","date":"2020-06-06T13:01:30.000Z","updated":"2020-06-07T12:31:44.360Z","comments":true,"path":"2020/06/06/nbP1942/","link":"","permalink":"https://licykoc.github.io/2020/06/06/nbP1942/","excerpt":"","text":"取数游戏：仔细读题多遍后可以发现，四元组中的a,b,c,d=&gt;a=b设x=a，y=c，那么变成x&lt;y. 通过以上分析，可以联想到这题取得4个数必定是小=&gt;大，所以先从小到大排序。 再读题，可以发现四元组中a和b相等，c和d相等，推出至少要2个相同的数才有可能被选成符合题意的四元组。 加下来的部分有点复杂:设一个数的出现次数为x，由题意得在x中选2个数来做四元组中的前2个，使用排列组合公式:p(x,2)=x*(x-1)可求出在x中一共的选择方法。 Ps：这一步可以用最长平台来实现示例代码:z:=1; for i:=2 to n+1 do if a[i]=a[i-1] then z:=z+1 else begin if z&gt;1 then begin tot:=tot+1; b[tot]:=(z*(z-1)) mod p; end; z:=1; end; 至此，此题以完成一半，最后使用前缀和维护b数组设最终答案为b[i]*(前i个b[i]的和) 2&lt;=i&lt;=n 原理的话就是排列组合（乘法原理） 最后附100pts代码const p=1000000007; var a,b,s:array[0..1000000] of int64; ans:int64; z,n,i,tot:longint; procedure sort (l,h:longint); var i,j,t,m:longint; begin i:=l; j:=h; m:=a[(i+j)&gt;&gt;1]; repeat while a[i]&lt;m do inc(i); while m&lt;a[j] do dec(j); if i&lt;=j then begin t:=a[i]; a[i]:=a[j]; a[j]:=t; inc(i); dec(j); end; until i&gt;j; if i&lt;h then sort(i,h); if j&gt;l then sort(l,j); end; begin read(n); for i:=1 to n do read(a[i]); sort(1,n); z:=1; for i:=2 to n+1 do if a[i]=a[i-1] then z:=z+1 else begin if z&gt;1 then begin tot:=tot+1; b[tot]:=(z*(z-1)) mod p; s[tot]:=(s[tot-1]+b[tot]) mod p; end; z:=1; end; for i:=2 to tot do ans:=(ans+(b[i]*s[i-1]) mod p) mod p; write(ans); end.","categories":[],"tags":[]},{"title":"宁波-题解 P1353 1．统计方格(Pascal)","slug":"nbP1352","date":"2020-06-06T12:01:30.000Z","updated":"2020-06-07T13:01:57.826Z","comments":true,"path":"2020/06/06/nbP1352/","link":"","permalink":"https://licykoc.github.io/2020/06/06/nbP1352/","excerpt":"","text":"说实话这题是真的水最多算个入门题目这么长其实可以总结成一下: 在一个n*m的01方格里，统计0的个数，以及0最多和最少的行 没话了。。看代码吧var n,m,i,j,x,ans,mx,mn,mxi,mni:longint; k:array[0..10000] of longint; begin readln(n,m); mx:=-maxlongint; mn:=maxlongint; //初始化 for i:=1 to n do begin for j:=1 to m do begin read(x); if x=0 then begin inc(k[i]); inc(ans); end; //k[i]=一行中0的个数;ans=0的总个数 end; if k[i]&gt;mx then begin mx:=k[i]; mxi:=i; end; //更新最大值 if k[i]&lt;mn then begin mn:=k[i]; mni:=i; end; //更新最小值 readln; end; write(ans,' ',mxi,' ',mni); //输出 end.","categories":[{"name":"入门","slug":"入门","permalink":"https://licykoc.github.io/categories/%E5%85%A5%E9%97%A8/"}],"tags":[]}],"categories":[{"name":"选文","slug":"选文","permalink":"https://licykoc.github.io/categories/%E9%80%89%E6%96%87/"},{"name":"普及/提高-","slug":"普及-提高","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A-%E6%8F%90%E9%AB%98/"},{"name":"普及-","slug":"普及","permalink":"https://licykoc.github.io/categories/%E6%99%AE%E5%8F%8A/"},{"name":"入门","slug":"入门","permalink":"https://licykoc.github.io/categories/%E5%85%A5%E9%97%A8/"}],"tags":[]}